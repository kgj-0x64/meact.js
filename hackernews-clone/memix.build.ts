import { glob } from "glob";
import path from "path";
import { writeFileSync } from "fs";
import {
  SERVER_API_DIRECTORY_NAME,
  SERVER_API_ROUTES_DIRECTORY_NAME,
  SERVER_DIRECTORY_NAME,
} from "./constants/fileAndDirectoryNameAndPaths.js";

export async function buildMemixServerSideHandlersMap() {
  console.log("Memix server side handlers have to be registered...");

  const relativePathToRoutes = `${SERVER_DIRECTORY_NAME}/${SERVER_API_DIRECTORY_NAME}/${SERVER_API_ROUTES_DIRECTORY_NAME}`;
  const routeFiles = glob.sync(`${relativePathToRoutes}/*.ts`);

  const imports = [];
  const mapEntries = [];

  for (const file of routeFiles) {
    const fileName = path.basename(file, ".ts");
    const importPath = path
      .relative("./memix/server", file)
      .replace(/\\/g, "/"); // Make the path relative and compatible with all OS

    const importStatementForThisFile = `import * as ${fileName} from "${importPath}";`;
    imports.push(importStatementForThisFile);

    // Dynamically import the module
    const moduleExports = await import(`./${file}`); // relative path

    const mapEntry = `[
      ${
        fileName.startsWith("_") ? `${fileName}.componentName` : `"${fileName}"`
      },
      {
        ${`"componentName": ${fileName}.componentName,`} 
        ${"meta" in moduleExports ? `metaFn: ${fileName}.meta,` : ""}
        ${"loader" in moduleExports ? `loaderFn: ${fileName}.loader,` : ""}
        ${"action" in moduleExports ? `actionFn: ${fileName}.action,` : ""}
      },
    ],`;

    mapEntries.push(mapEntry);
  }

  const outputContent = `
    /**
      * 
      * ! DON'T EDIT Directly!!!
      * Generated by Esbuild using Meact's custom plugin "build-memix-build-map-plugin"
      * 
    */
    import { MeactMeta } from "@meact-csr";
    ${imports.join("\n")}

    interface IComponentServerSideHandlers {
      componentName: string;
      metaFn?: MeactMeta;
      loaderFn?: Function;
      actionFn?: Function;
    }
    
    export const mapOfComponentNameToServerSideHandlers: Map<
      string,
      IComponentServerSideHandlers
    > = new Map([
      ${mapEntries.join("\n")}
    ]);
  `;

  writeFileSync("./memix/server/build.ts", outputContent.trim());
  console.log("Memix server side handlers have been registered successfully.");
}

buildMemixServerSideHandlersMap()
  .then(() => {
    console.log("Successfuly built Memix Server Side Handlers Map");
    process.exit(); // Explicitly terminate the process
  })
  .catch((err) => {
    console.error("Error in building Memix Server Side Handlers Map:", err);
    process.exit(1); // Exit with a non-zero status code on error
  });
